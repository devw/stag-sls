service: stag

frameworkVersion: '2'

custom:
  tableName: stag
  bucketName: stag-2020

provider:
  name: aws
  runtime: nodejs12.x
  profile: stagUser
  region: eu-west-3
  environment: 
    tableName: ${self:custom.tableName}  
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - s3:PutObject
        - s3:GetObject
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: 
        - arn:aws:s3:::${self:provider.environment.bucketName}/*
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.tableName}/index/*
plugins:
  - serverless-webpack

package:
  individually: true

functions:
  registerShop:
    handler: lambdas/endpoints/registerShop.handler
    events:
      - http:
          path: register-shop/{ID}
          method: POST
          cors: true
  upload:
    handler: lambdas/endpoints/upload.handler
    events:
      - http:
          path: upload
          method: POST
          cors: true
  getShop:
    handler: lambdas/endpoints/getShop.handler
    events:
      - http:
          path: get-shop/{shop}
          method: GET
          cors: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    DemoDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: shop
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: shop-index
            KeySchema:
              - AttributeName: shop
                KeyType: HASH
            Projection:
              ProjectionType: ALL

